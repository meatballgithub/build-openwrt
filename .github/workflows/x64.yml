name: X64

on:
  workflow_dispatch:
  schedule:
    - cron: 0 20 * * 6
  push:
    branches:
      - master
    paths:
      - '.github/workflows/x64.yml'
  release:
    types: [published]

env:
  workdir: /mnt/openwrt

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-22.04

    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id

    steps:

      # - name: Free space
      #   uses: endersonmenezes/free-disk-space@v2
      #   with:
      #     remove_android: true
      #     remove_dotnet: true
      #     remove_haskell: true
      #     remove_tool_cache: true
      #     remove_swap: true
      #     remove_packages: "azure-cli google-cloud-cli microsoft-edge-stable google-chrome-stable firefox postgresql* temurin-* *llvm* mysql* dotnet-sdk-*"
      #     remove_packages_one_command: true
      #     remove_folders: "/usr/share/swift /usr/share/miniconda /usr/share/az* /usr/share/glade* /usr/local/lib/node_modules /usr/local/share/chromium /usr/local/share/powershell"
      #     testing: false

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          df -h
          # sudo -E apt-mark hold grub-efi-amd64-signed
          # sudo -E apt-get update
          # sudo -E apt -y full-upgrade
          # sudo -E apt-get -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev qemu-img
          # sudo -E systemctl daemon-reload
          # sudo -E apt-get -y autoremove --purge
          # sudo -E apt-get clean
          # sudo -E timedatectl set-timezone "Asia/Shanghai"
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          df -h

      - name: Checkout OpenWrt
        uses: actions/checkout@v3

      - name: Clone source code and update feeds
        env:
          REPO_URL: https://github.com/coolsnowwolf/lede
          REPO_BRANCH: master
        run: |
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH /mnt/openwrt
          cd /mnt/openwrt
          echo -e 'src-git helloworld https://github.com/fw876/helloworld;master' >> ./feeds.conf.default
          echo -e 'src-git lienolpackage https://github.com/Lienol/openwrt-package' >> ./feeds.conf.default
          echo "src-git passwall_packages https://github.com/xiaorouji/openwrt-passwall-packages.git;main" >> "feeds.conf.default"
          echo "src-git passwall https://github.com/xiaorouji/openwrt-passwall.git;main" >> "feeds.conf.default"
          ./scripts/feeds update -a

          WORKINGDIR="`pwd`/feeds/packages/net/smartdns"
          mkdir $WORKINGDIR -p
          rm $WORKINGDIR/* -fr
          wget https://github.com/pymumu/openwrt-smartdns/archive/master.zip -O $WORKINGDIR/master.zip
          unzip $WORKINGDIR/master.zip -d $WORKINGDIR
          mv $WORKINGDIR/openwrt-smartdns-master/* $WORKINGDIR/
          rmdir $WORKINGDIR/openwrt-smartdns-master
          rm $WORKINGDIR/master.zip

          LUCIBRANCH="lede" #更换此变量
          WORKINGDIR="`pwd`/feeds/luci/applications/luci-app-smartdns"
          mkdir $WORKINGDIR -p
          rm $WORKINGDIR/* -fr
          wget https://github.com/pymumu/luci-app-smartdns/archive/${LUCIBRANCH}.zip -O $WORKINGDIR/${LUCIBRANCH}.zip
          unzip $WORKINGDIR/${LUCIBRANCH}.zip -d $WORKINGDIR
          mv $WORKINGDIR/luci-app-smartdns-${LUCIBRANCH}/* $WORKINGDIR/
          rmdir $WORKINGDIR/luci-app-smartdns-${LUCIBRANCH}
          rm $WORKINGDIR/${LUCIBRANCH}.zip

          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        run: |
          cd /mnt/openwrt
          rm -f ./.config*
          touch ./.config

          #
          # ========================固件定制部分========================
          #

          #
          # 如果不对本区块做出任何编辑, 则生成默认配置固件.
          #

          # 以下为定制化固件选项和说明:
          #

          #
          # 有些插件/选项是默认开启的, 如果想要关闭, 请参照以下示例进行编写:
          #
          #          =========================================
          #         |  # 取消编译VMware镜像:                   |
          #         |  cat >> .config <<EOF                   |
          #         |  # CONFIG_VMDK_IMAGES is not set        |
          #         |  EOF                                    |
          #          =========================================
          #

          #
          # 以下是一些提前准备好的一些插件选项.
          # 直接取消注释相应代码块即可应用. 不要取消注释代码块上的汉字说明.
          # 如果不需要代码块里的某一项配置, 只需要删除相应行.
          #
          # 如果需要其他插件, 请按照示例自行添加.
          # 注意, 只需添加依赖链顶端的包. 如果你需要插件 A, 同时 A 依赖 B, 即只需要添加 A.
          #
          # 无论你想要对固件进行怎样的定制, 都需要且只需要修改 EOF 回环内的内容.
          #

          # 编译x64固件:
          cat >> .config <<EOF
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_Generic=y
          EOF

          # Image Options 固件大小(MB) 不设置则是默认
          # cat >> .config <<EOF
          # CONFIG_TARGET_KERNEL_PARTSIZE=16
          # CONFIG_TARGET_ROOTFS_PARTSIZE=160
          # # CONFIG_TARGET_ROOTFS_PERSIST_VAR is not set
          # EOF

          # 固件压缩:
          cat >> .config <<EOF
          CONFIG_TARGET_IMAGES_GZIP=y
          EOF

          # 编译UEFI固件:
          cat >> .config <<EOF
          CONFIG_EFI_IMAGES=y
          CONFIG_GRUB_CONSOLE=y
          CONFIG_GRUB_SERIAL="ttyS0"
          CONFIG_GRUB_BAUDRATE=115200
          EOF

          # IPv6支持:
          cat >> .config <<EOF
          CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
          CONFIG_PACKAGE_ipv6helper=y
          EOF

          # 多文件系统支持:
          # cat >> .config <<EOF
          # CONFIG_PACKAGE_kmod-fs-nfs=y
          # CONFIG_PACKAGE_kmod-fs-nfs-common=y
          # CONFIG_PACKAGE_kmod-fs-nfs-v3=y
          # CONFIG_PACKAGE_kmod-fs-nfs-v4=y
          # CONFIG_PACKAGE_kmod-fs-ntfs=y
          # CONFIG_PACKAGE_kmod-fs-squashfs=y
          # EOF

          # USB3.0支持:
          # cat >> .config <<EOF
          # CONFIG_PACKAGE_kmod-usb-ohci=y
          # CONFIG_PACKAGE_kmod-usb-ohci-pci=y
          # CONFIG_PACKAGE_kmod-usb2=y
          # CONFIG_PACKAGE_kmod-usb2-pci=y
          # CONFIG_PACKAGE_kmod-usb3=y
          # EOF

          # 常用LuCI插件选择:
          cat >> .config <<EOF
          CONFIG_PACKAGE_luci-app-smartdns=y #smartdns
          CONFIG_PACKAGE_luci-app-udpxy=y
          CONFIG_PACKAGE_luci-nginx=y
          CONFIG_PACKAGE_luci-app-ssr-plus=y #ssr
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Rust_Client=y
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_SagerNet_Core is not set
          # CONFIG_PACKAGE_sagernet-core is not set
          CONFIG_PACKAGE_luci-app-passwall=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Client=y
          # CONFIG_PACKAGE_luci-app-uhttpd=y #uhttpd
          # CONFIG_PACKAGE_luci-app-eqos=y
          # CONFIG_DEFAULT_luci-app-adbyby-plus=y
          # CONFIG_PACKAGE_luci-app-socat=y #ipv6端口转发
          EOF

          # LuCI主题:
          # cat >> .config <<EOF
          # CONFIG_PACKAGE_luci-theme-argon=y
          # CONFIG_PACKAGE_luci-theme-netgear=y
          # EOF

          # 常用软件包:
          cat >> .config <<EOF
          CONFIG_PACKAGE_netdata=y
          CONFIG_PACKAGE_openssh-sftp-server=y #sftp服务器
          CONFIG_PACKAGE_curl=y
          CONFIG_PACKAGE_htop=y
          CONFIG_PACKAGE_nano=y
          CONFIG_PACKAGE_screen=y
          CONFIG_PACKAGE_tree=y
          CONFIG_PACKAGE_vim-fuller=y
          CONFIG_PACKAGE_wget=y
          EOF

          # 取消编译VMware镜像以及镜像填充 (不要删除被缩进的注释符号):
          cat >> .config <<EOF
          # CONFIG_TARGET_IMAGES_PAD is not set
          # CONFIG_VMDK_IMAGES is not set
          EOF

          cat >> .config <<EOF
          # 禁用电台相关包
          # CONFIG_PACKAGE_radio-feature is not set
          # CONFIG_PACKAGE_radio-driver is not set
          EOF

          #
          # ========================固件定制部分结束========================
          #

          sed -i 's/^[ \t]*//g' ./.config
          make defconfig

      - name: Cache
        uses: stupidloud/cachewrtbuild@main
        with:
          ccache: 'true'
          mixkey: 'lede_openwrt_x64'
          prefix: ${{ github.workspace }}/openwrt

      - name: Make download
        run: |
          cd /mnt/openwrt
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        run: |
          cd /mnt/openwrt
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: |
          cd /mnt/openwrt
          mkdir -p ./artifact/
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f -name "*efi.img.gz") ./artifact/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/

      - name: Deliver firmware
        uses: actions/upload-artifact@v4
        with:
          name: X64_firmware
          path: /mnt/openwrt/artifact/
